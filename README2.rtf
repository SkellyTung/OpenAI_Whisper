{\rtf1\ansi\deff0\nouicompat{\fonttbl{\f0\fnil\fcharset136 \'b7\'73\'b2\'d3\'a9\'fa\'c5\'e9;}{\f1\fswiss\fprq2\fcharset0 Calibri;}{\f2\froman\fprq2\fcharset136 \'b7\'73\'b2\'d3\'a9\'fa\'c5\'e9;}}
{\colortbl ;\red0\green0\blue255;}
{\*\generator Riched20 10.0.19041}\viewkind4\uc1 
\pard\f0\fs22 # Whisper\par
\par
[[Blog]](https://openai.com/blog/whisper)\par
[[Paper]](https://arxiv.org/abs/2212.04356)\par
[[Model card]](https://github.com/openai/whisper/blob/main/model-card.md)\par
[[Colab example]](https://colab.research.google.com/github/openai/whisper/blob/master/notebooks/LibriSpeech.ipynb)\par
\par
Whisper is a general-purpose speech recognition model. It is trained on a large dataset of diverse audio and is also a multitasking model that can perform multilingual speech recognition, speech translation, and language identification.\par
\par
\par
## Approach\par
\par
![Approach](https://raw.githubusercontent.com/openai/whisper/main/approach.png)\par
\par
A Transformer sequence-to-sequence model is trained on various speech processing tasks, including multilingual speech recognition, speech translation, spoken language identification, and voice activity detection. These tasks are jointly represented as a sequence of tokens to be predicted by the decoder, allowing a single model to replace many stages of a traditional speech-processing pipeline. The multitask training format uses a set of special tokens that serve as task specifiers or classification targets.\par
\par
\par
## Setup\par
\par
We used Python 3.9.9 and [PyTorch](https://pytorch.org/) 1.10.1 to train and test our models, but the codebase is expected to be compatible with Python 3.8-3.11 and recent PyTorch versions. The codebase also depends on a few Python packages, most notably [OpenAI's tiktoken](https://github.com/openai/tiktoken) for their fast tokenizer implementation. You can download and install (or update to) the latest release of Whisper with the following command:\par
\par
    pip install -U openai-whisper\par
\par
Alternatively, the following command will pull and install the latest commit from this repository, along with its Python dependencies:\par
\par
    pip install git+https://github.com/openai/whisper.git \par
\par
To update the package to the latest version of this repository, please run:\par
\par
    pip install --upgrade --no-deps --force-reinstall git+https://github.com/openai/whisper.git\par
\par
It also requires the command-line tool [`ffmpeg`](https://ffmpeg.org/) to be installed on your system, which is available from most package managers:\par
\par
```bash\par
# on Ubuntu or Debian\par
sudo apt update && sudo apt install ffmpeg\par
\par
# on Arch Linux\par
sudo pacman -S ffmpeg\par
\par
# on MacOS using Homebrew ({{\field{\*\fldinst{HYPERLINK https://brew.sh/ }}{\fldrslt{https://brew.sh/\ul0\cf0}}}}\f0\fs22 )\par
brew install ffmpeg\par
\par
# on Windows using Chocolatey ({{\field{\*\fldinst{HYPERLINK https://chocolatey.org/ }}{\fldrslt{https://chocolatey.org/\ul0\cf0}}}}\f0\fs22 )\par
choco install ffmpeg\par
\par
# on Windows using Scoop ({{\field{\*\fldinst{HYPERLINK https://scoop.sh/ }}{\fldrslt{https://scoop.sh/\ul0\cf0}}}}\f0\fs22 )\par
scoop install ffmpeg\par
```\par
\par
You may need [`rust`](http://rust-lang.org) installed as well, in case [tiktoken](https://github.com/openai/tiktoken) does not provide a pre-built wheel for your platform. If you see installation errors during the `pip install` command above, please follow the [Getting started page](https://www.rust-lang.org/learn/get-started) to install Rust development environment. Additionally, you may need to configure the `PATH` environment variable, e.g. `export PATH="$HOME/.cargo/bin:$PATH"`. If the installation fails with `No module named 'setuptools_rust'`, you need to install `setuptools_rust`, e.g. by running:\par
\par
```bash\par
pip install setuptools-rust\par
```\par
\par
\par
## Available models and languages\par
\par
There are five model sizes, four with English-only versions, offering speed and accuracy tradeoffs. Below are the names of the available models and their approximate memory requirements and relative speed. \par
\par
\par
|  Size  | Parameters | English-only model | Multilingual model | Required VRAM | Relative speed |\par
|:------:|:----------:|:------------------:|:------------------:|:-------------:|:--------------:|\par
|  tiny  |    39 M    |     `tiny.en`      |       `tiny`       |     ~1 GB     |      ~32x      |\par
|  base  |    74 M    |     `base.en`      |       `base`       |     ~1 GB     |      ~16x      |\par
| small  |   244 M    |     `small.en`     |      `small`       |     ~2 GB     |      ~6x       |\par
| medium |   769 M    |    `medium.en`     |      `medium`      |     ~5 GB     |      ~2x       |\par
| large  |   1550 M   |        N/A         |      `large`       |    ~10 GB     |       1x       |\par
\par
The `.en` models for English-only applications tend to perform better, especially for the `tiny.en` and `base.en` models. We observed that the difference becomes less significant for the `small.en` and `medium.en` models.\par
\par
Whisper's performance varies widely depending on the language. The figure below shows a WER (Word Error Rate) breakdown by languages of the Fleurs dataset using the `large-v2` model (The smaller the numbers, the better the performance). Additional WER scores corresponding to the other models and datasets can be found in Appendix D.1, D.2, and D.4. Meanwhile, more BLEU (Bilingual Evaluation Understudy) scores can be found in Appendix D.3. Both are found in [the paper](https://arxiv.org/abs/2212.04356). \par
\par
![WER breakdown by language](https://raw.githubusercontent.com/openai/whisper/main/language-breakdown.svg)\par
\par
\par
\par
## Command-line usage\par
====\par
\par
The following command will transcribe speech in audio files, using the medium model:\par
( -w ignore)\par
\par
    python -w ignore cli.py audio.wav --model medium\par
\par
    whisper audio.flac audio.mp3 audio.wav --model medium\par
\par
\'a5\'48\'a4\'57\'ab\'fc\'a5\'4f\'bd\'d0\'a6\'62 ...\\OpenAI_Whisper\\venv\\Lib\\site-packages\\humanfriendly> \'a5\'d8\'bf\'fd\'a4\'55\'b0\'f5\'a6\'e6 for cli.py \'bb\'79\'ad\'b5\'c2\'e0\'a4\'e5\'a6\'72\par
====\par
\par
The following command will onnx export: (python3 --> python)\par
\par
    python cli.py audio.wav --model medium --export_encoder\par
\par
    python cli.py audio.wav --model medium --export_decoder\par
\par
\par
====\par
The following command will transcribe speech in audio files, using the `medium` model:\par
\par
    whisper audio.flac audio.mp3 audio.wav --model medium\par
\par
The default setting (which selects the `small` model) works well for transcribing English. To transcribe an audio file containing non-English speech, you can specify the language using the `--language` option:\par
\par
    whisper japanese.wav --language Japanese\par
\par
Adding `--task translate` will translate the speech into English:\par
\par
    whisper japanese.wav --language Japanese --task translate\par
\par
Run the following to view all available options:\par
\par
    whisper --help\par
\par
See [tokenizer.py](https://github.com/openai/whisper/blob/main/whisper/tokenizer.py) for the list of all available languages.\par
\par
\par
## Python usage\par
\par
Transcription can also be performed within Python: \par
\par
```python\par
import whisper\par
\par
model = whisper.load_model("base")\par
result = model.transcribe("audio.mp3")\par
print(result["text"])\par
```\par
\par
Internally, the `transcribe()` method reads the entire file and processes the audio with a sliding 30-second window, performing autoregressive sequence-to-sequence predictions on each window.\par
\par
Below is an example usage of `whisper.detect_language()` and `whisper.decode()` which provide lower-level access to the model.\par
\par
```python\par
import whisper\par
\par
model = whisper.load_model("base")\par
\par
# load audio and pad/trim it to fit 30 seconds\par
audio = whisper.load_audio("audio.mp3")\par
audio = whisper.pad_or_trim(audio)\par
\par
# make log-Mel spectrogram and move to the same device as the model\par
mel = whisper.log_mel_spectrogram(audio).to(model.device)\par
\par
# detect the spoken language\par
_, probs = model.detect_language(mel)\par
print(f"Detected language: \{max(probs, key=probs.get)\}")\par
\par
# decode the audio\par
options = whisper.DecodingOptions()\par
result = whisper.decode(model, mel, options)\par
\par
# print the recognized text\par
print(result.text)\par
```\par
\par
## More examples\par
\par
Please use the [?? Show and tell](https://github.com/openai/whisper/discussions/categories/show-and-tell) category in Discussions for sharing more example usages of Whisper and third-party extensions such as web demos, integrations with other tools, ports for different platforms, etc.\par
\par
## Remark from Skelly\par
\par
If: DeprecationWarning: 'pipes' is deprecated and slated for removal in Python 3.13\par
  import pipes\par

\pard\nowidctlpar\kerning2\f1\fs24\lang1033\par
1.\tab\f2\'a5\'b4\'b6\'7d\'a9\'52\'a5\'4f\'a6\'43\'b2\'d7\'ba\'dd\'a1\'43\f1\par
2.\tab\f2\'a4\'c1\'b4\'ab\'a8\'ec\f1  cli.py \f2\'c0\'c9\'a9\'d2\'a6\'62\'aa\'ba\'a5\'d8\'bf\'fd\'a1\'43\'a6\'62\'b1\'7a\'aa\'ba\'b1\'a1\'aa\'70\'a4\'55\'a1\'41\'a5\'d8\'bf\'fd\'b8\'f4\'ae\'7c\'ac\'4f\f1  C:\\Users\\iec920391\\OpenAI_Whisper\\venv\\Lib\\site-packages\\humanfriendly\f2\'a1\'43\f1\par
3.\tab\f2\'a8\'cf\'a5\'ce\'a4\'e5\'a6\'72\'bd\'73\'bf\'e8\'be\'b9\'a5\'b4\'b6\'7d\f1  cli.py \f2\'a4\'e5\'a5\'f3\'a1\'43\f1\par
4.\tab\f2\'a6\'62\'c0\'c9\'aa\'ba\'b2\'c4\f1 82\f2\'a6\'e6\'a1\'41\'b1\'4e\f1  import pipes \f2\'ad\'d7\'a7\'ef\'ac\'b0\f1  import subprocess\f2\'a1\'43\'b1\'4e\f1  pipes.quote() \f2\'ad\'d7\'a7\'ef\'ac\'b0\f1  subprocess.list2cmdline()\f2\'a1\'43\f1\par
5.\tab\f2\'ab\'4f\'a6\'73\'c0\'c9\'a8\'c3\'c3\'f6\'b3\'ac\'bd\'73\'bf\'e8\'be\'b9\'a1\'43\f1\par
6.\tab\f2\'b2\'7b\'a6\'62\'a1\'41\'b1\'7a\'a5\'69\'a5\'48\'a6\'41\'a6\'b8\'b9\'c1\'b8\'d5\'b9\'42\'a6\'e6\'a4\'a7\'ab\'65\'aa\'ba\'a9\'52\'a5\'4f\'a1\'41\'ac\'dd\'ac\'dd\'ac\'4f\'a7\'5f\'c1\'d9\'b7\'7c\'a5\'58\'b2\'7b\f1  DeprecationWarning \f2\'c4\'b5\'a7\'69\'a1\'43\f1\par
\f2\'b3\'71\'b9\'4c\'b1\'4e\f1  import pipes \f2\'ad\'d7\'a7\'ef\'ac\'b0\f1  import subprocess\f2\'a1\'41\'a5\'48\'a4\'ce\'b1\'4e\f1  pipes.quote() \f2\'ad\'d7\'a7\'ef\'ac\'b0\f1  subprocess.list2cmdline()\f2\'a1\'41\'b1\'7a\'b1\'4e\'a8\'cf\'a5\'ce\f1  subprocess \f2\'bc\'d2\'b2\'d5\'a5\'4e\'b4\'c0\'a4\'77\'b1\'f3\'a5\'ce\'aa\'ba\f1  pipes \f2\'bc\'d2\'b2\'d5\'a1\'41\'b1\'71\'a6\'d3\'b8\'d1\'a8\'4d\'c4\'b5\'a7\'69\'b0\'dd\'c3\'44\'a1\'43\f1\par
\par

\pard\kerning0\f0\fs22\lang0\par
## License\par
\par
Whisper's code and model weights are released under the MIT License. See [LICENSE](https://github.com/openai/whisper/blob/main/LICENSE) for further details.\par
\par
}
 